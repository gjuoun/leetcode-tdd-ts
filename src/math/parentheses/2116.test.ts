function canBeValid(s: string, locked: string): boolean {
  // handle edge cases
  if (s[0] === ")" && s.length === 1) {
    return false;
  }

  if (s[s.length - 1] === "(" && locked[locked.length - 1] === "1") {
    return false;
  }

  const openList: number[] = [];
  const freeList: number[] = [];

  for (let i = 0; i < s.length; i++) {
    if (locked[i] === "0") {
      freeList.push(i);
    } else if (s[i] === "(") {
      openList.push(i);
    } else if (s[i] === ")" && openList.length > 0) {
      openList.pop();
    } else if (s[i] === ")" && freeList.length > 0) {
      freeList.pop();
    } else {
      // extra ) detected
      return false;
    }
  }

  openList;
  freeList;

  while (openList.length > 0 && freeList.length > 0) {
    const openIndex = openList[openList.length - 1]; //?
    const lastFreeIndex = freeList[freeList.length - 1]; //?

    // openIndex => the index of the leftmost (
    // lastFreeIndex => the index of the last free index
    if (openIndex > lastFreeIndex) {
      return false;
    } else {
      openList.pop();
      freeList.pop();
    }
  }

  if (openList.length > 0) {
    return false;
  }

  return freeList.length % 2 === 0;
}

// canBeValid("))()))", "010100"); //?
// canBeValid("()()", "0000"); //?

// canBeValid(
//   "((()(()()))()((()()))))()((()(()",
//   "10111100100101001110100010001001"
// ); //?

// canBeValid(
//   "())(()(()(())()())(())((())(()())((())))))(((((((())(()))))(",
//   "100011110110011011010111100111011101111110000101001101001111"
// ); //?

// canBeValid(
//   "(()))()))(()((()()(((()))()()()()()())))()()(()())()(()((()()((()((((((()(()()(()()())(((((())((()))))()(((((((()()())()))())((((((()(())())()((())()()((())((((())(((())(())()()))(((()()())())))((()))))()()()((()))())(())(((()()((())(())(())())()((()))())(())()(()())((((()(((())((()()())(((()(((((()))()))))))(()((())())(())))))(())(((())()()(()))())())))(((())))()()))()())))))())()(()()))(())(()())))())()))((((())(()))()(((())())(()(()))()))((()(())()()))))())(()(((((()",
//   "110001111001011100000100011110101000100110010010011001110010111111100111000100000000101111101001111111011101001110011001001100100001100000000010100010101101100000100001000110111000111110110010111011010010100011111101110011100010010001111001010001001000111101101111111011001000100111100110101000100011011001001100110011111111111100101000100111111100000100101101000101111101000011110001001011111010011010000100100000000011101011001110000110011000100001110101100101111111110100"
// ); //?

// canBeValid(")(", "00"); //?

describe("canBeValid", () => {
  it("should return get correct outputs", () => {
    const cases = [
      { s: ")(", locked: "00", expected: true },
      { s: "))()))", locked: "010100", expected: true },
      { s: "()()", locked: "0000", expected: true },
      {
        s: "((()(()()))()((()()))))()((()(()",
        locked: "10111100100101001110100010001001",
        expected: true,
      },
      {
        s: "())(()(()(())()())(())((())(()())((())))))(((((((())(()))))(",
        locked: "100011110110011011010111100111011101111110000101001101001111",
        expected: false,
      },
      {
        s: "(()))()))(()((()()(((()))()()()()()())))()()(()())()(()((()()((()((((((()(()()(()()())(((((())((()))))()(((((((()()())()))())((((((()(())())()((())()()((())((((())(((())(())()()))(((()()())())))((()))))()()()((()))())(())(((()()((())(())(())())()((()))())(())()(()())((((()(((())((()()())(((()(((((()))()))))))(()((())())(())))))(())(((())()()(()))())())))(((())))()()))()())))))())()(()()))(())(()())))())()))((((())(()))()(((())())(()(()))()))((()(())()()))))())(()(((((()",
        locked:
          "110001111001011100000100011110101000100110010010011001110010111111100111000100000000101111101001111111011101001110011001001100100001100000000010100010101101100000100001000110111000111110110010111011010010100011111101110011100010010001111001010001001000111101101111111011001000100111100110101000100011011001001100110011111111111100101000100111111100000100101101000101111101000011110001001011111010011010000100100000000011101011001110000110011000100001110101100101111111110100",
        expected: false,
      },
    ];

    cases.forEach(({ s, locked, expected }) => {
      expect(canBeValid(s, locked)).toBe(expected);
    });
  });
});
